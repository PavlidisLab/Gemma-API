% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allEndpoints.R
\name{getPlatforms}
\alias{getPlatforms}
\title{Platforms
List platforms filtered and organized by given parameters}
\usage{
getPlatforms(
  platforms = NA_character_,
  filter = NA_character_,
  offset = 0L,
  limit = 20L,
  sort = "+id",
  raw = getOption("gemma.raw", F),
  async = getOption("gemma.async", F),
  memoised = getOption("gemma.memoise", F),
  file = getOption("gemma.file", NA_character_),
  overwrite = getOption("gemma.overwrite", F)
)
}
\arguments{
\item{platforms}{Optional, defaults to \code{empty}.
Limits the result to entities with given identifiers.
A list of identifiers, separated by commas (e.g:
\verb{GPL96,GPL1355,GPL1261}). Identifiers can either be the Platform ID or
its short name. Retrieval by ID is more efficient.
Only platforms that user has access to will be available.
Do not combine different identifiers in one query.}

\item{filter}{Optional, defaults to \code{empty}.
Filtering can be done on any\* property or nested property that the
appropriate object class defines or inherits (and that is mapped by
hibernate). [These do not correspond to the properties of the objects
returned by the API calls.]{.description-imp}
Class definitions:
\itemize{
\item Datasets:
\href{http://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/model/expression/experiment/ExpressionExperiment.html}{[javaDoc]}
\href{https://github.com/ppavlidis/Gemma/blob/development/gemma-core/src/main/java/ubic/gemma/model/expression/experiment/ExpressionExperiment.java}{[gitHub]}
\item Platforms:
\href{http://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/model/expression/arrayDesign/ArrayDesign.html}{[javaDoc]}
\href{https://github.com/ppavlidis/Gemma/blob/development/gemma-core/src/main/java/ubic/gemma/model/expression/arrayDesign/ArrayDesign.java}{[gitHub]}
E.g: \code{curationDetails} or \code{curationDetails.lastTroubledEvent.date}.
\* Any property of a supported type. Currently supported types are:
\item String - property of String type, required value can be any String.
\item Number - any Number implementation. Required value must be a string
parseable to the specific Number type.
\item Boolean - required value will be parsed to true only if the string
matches \'true\', ignoring case.
Accepted operator keywords are:
\item \'=\' - equality
\item \'!=\' - non-equality
\item \'\<\' - smaller than
\item \'\>\' - larger than
\item \'\<=\' - smaller or equal
\item \'=\>\' - larger or equal
\item \'like\' - similar string, effectively means \'contains\',
translates to the sql \'LIKE\' operator (given value will be
surrounded by \% signs)
Multiple filters can be chained using \code{AND} and \code{OR} keywords.\
Leave space between the keywords and the previous/next word!\
E.g: \verb{?filter=property1 < value1 AND property2 like value2}
If chained filters are mixed conjunctions and disjunctions, the query
must be in conjunctive normal form (CNF). Parentheses are not necessary
\item every AND keyword separates blocks of disjunctions.
Example:\
\verb{?filter=p1 = v1 OR p1 != v2 AND p2 <= v2 AND p3 > v3 OR p3 < v4}\
Above query will translate to:\
\verb{(p1 = v1 OR p1 != v2) AND (p2 <= v2) AND (p3 > v3 OR p3 < v4;)}
Breaking the CNF results in an error.
Filter \code{curationDetails.troubled} will be ignored if user is not an
administrator.
}}

\item{offset}{Optional, defaults to \code{0}.
Skips the specified amount of objects when retrieving them from the
database.}

\item{limit}{Optional, defaults to \code{20}.
Limits the result to specified amount of objects. Use 0 for no limit.}

\item{sort}{Optional, defaults to \code{+id}.
Sets the ordering property and direction.
Format is \verb{[+,-][property name]}. E.g. \code{-accession} will translate to
descending ordering by the \'Accession\' property.
Note that this does [not guarantee the order of the returned
entities!]{.description-imp} This is merely a signal to how the data
should be pre-sorted before the limit and offset are applied.
Nested properties are also supported (recursively).\
E.g: \code{+curationDetails.lastTroubledEvent.date}
[]{.glyphicon .glyphicon-th-large .glyphicon-exclamation-sign} When
using in scripts, remember to URL-encode the \'+\' plus character (see
the compiled URL below).}

\item{raw}{\code{FALSE} to receive results as-is from Gemma, or \code{TRUE} to enable
parsing.}

\item{async}{\code{TRUE} to run the API query on a separate worker, or \code{FALSE} to run
synchronously. See the \code{async} package for details.}

\item{memoised}{Whether or not to cache results so future requests for the same data
will be faster. Use \code{forgetGemmaMemoised} to clear the cache.}

\item{file}{The name of a file to save the results to, or \code{NULL} to not write
results to a file. If \code{raw == TRUE}, the output will be a JSON file.
Otherwise, it will be a RDS file.}

\item{overwrite}{Whether or not to overwrite if a file exists at the specified filename.}
}
\value{
An array of value objects representing the objects that matched the
query.
Empty array if no objects matched.
}
\description{
Platforms
List platforms filtered and organized by given parameters
}
\keyword{platform}
