% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allEndpoints.R
\name{getDatasetExpression}
\alias{getDatasetExpression}
\title{getDatasetExpression}
\usage{
getDatasetExpression(
  dataset = NA_character_,
  filter = FALSE,
  raw = getOption("gemma.raw", FALSE),
  memoised = getOption("gemma.memoise", FALSE),
  file = getOption("gemma.file", NA_character_),
  overwrite = getOption("gemma.overwrite", FALSE)
)
}
\arguments{
\item{dataset}{Required, part of the URL path.
Can either be the dataset ID or its short name (e.g. \code{GSE1234}).
Retrieval by ID is more efficient.
Only datasets that user has access to will be available}

\item{filter}{Optional, defaults to \code{empty}.
Filtering can be done on any* property or nested property that the
appropriate object class defines or inherits (and that is mapped by
hibernate). [These do not correspond to the properties of the objects
returned by the API calls.]{.description-imp}
Class definitions:
\itemize{
\item Datasets:
\href{http://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/model/expression/experiment/ExpressionExperiment.html}{javaDoc}     \href{https://github.com/ppavlidis/Gemma/blob/development/gemma-core/src/main/java/ubic/gemma/model/expression/experiment/ExpressionExperiment.java}{gitHub}
\item Platforms:
\href{http://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/model/expression/arrayDesign/ArrayDesign.html}{javaDoc}     \href{https://github.com/ppavlidis/Gemma/blob/development/gemma-core/src/main/java/ubic/gemma/model/expression/arrayDesign/ArrayDesign.java}{gitHub}
E.g: \code{curationDetails} or \code{curationDetails.lastTroubledEvent.date}.
}
\itemize{
\item Any property of a supported type. Currently supported types are:
}
\itemize{
\item String - property of String type, required value can be any String.
\item Number - any Number implementation. Required value must be a string
parseable to the specific Number type.
\item Boolean - required value will be parsed to true only if the string
matches 'true', ignoring case.
Accepted operator keywords are:
\item '=' - equality
\item '!=' - non-equality
\item '<' - smaller than
\item '>' - larger than
\item '<=' - smaller or equal
\item '=>' - larger or equal
\item 'like' - similar string, effectively means 'contains',
translates to the sql 'LIKE' operator (given value will be
surrounded by \% signs)
Multiple filters can be chained using \code{AND} and \code{OR} keywords.
Leave space between the keywords and the previous/next word!
E.g: \verb{?filter=property1 < value1 AND property2 like value2}
If chained filters are mixed conjunctions and disjunctions, the query
must be in conjunctive normal form (CNF). Parentheses are not necessary
\item every AND keyword separates blocks of disjunctions.
Example:
\verb{?filter=p1 = v1 OR p1 != v2 AND p2 <= v2 AND p3 > v3 OR p3 < v4}
Above query will translate to:
\verb{(p1 = v1 OR p1 != v2) AND (p2 <= v2) AND (p3 > v3 OR p3 < v4;)}
Breaking the CNF results in an error.
Filter \code{curationDetails.troubled} will be ignored if user is not an
administrator.
}}

\item{raw}{\code{TRUE} to receive results as-is from Gemma, or \code{FALSE} to enable
parsing.}

\item{memoised}{Whether or not to cache results so future requests for the same data
will be faster. Use \code{forgetGemmaMemoised} to clear the cache.}

\item{file}{The name of a file to save the results to, or \code{NULL} to not write
results to a file. If \code{raw == TRUE}, the output will be a JSON file.
Otherwise, it will be a RDS file.}

\item{overwrite}{Whether or not to overwrite if a file exists at the specified filename.}
}
\value{
Varies
}
\description{
Retrieves the expression matrix for the given dataset
}
\examples{
dat <- getDatasetExpression("GSE2018")
str(dat)
}
\keyword{dataset}
