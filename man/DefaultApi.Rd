% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openapi_generated.R
\docType{class}
\name{DefaultApi}
\alias{DefaultApi}
\title{Default operations}
\format{
An \code{R6Class} generator object

An \code{R6Class} generator object
}
\description{
DefaultApi
}
\details{
Gemma RESTful API

This website documents the usage of the Gemma REST API(https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found here(https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the links section(https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to these terms and conditions(https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.

The version of the OpenAPI document: 2.4.1
Contact: pavlab-support@msl.ubc.ca
Generated by: https://openapi-generator.tech

Gemma RESTful API

This website documents the usage of the Gemma REST API(https://gemma.msl.ubc.ca/rest/v2/). Here you can find example script usage of the API, as well as graphical interface for each endpoint, with description of its parameters and the endpoint URL.  The documentation of the underlying java code can be found here(https://gemma.msl.ubc.ca/resources/apidocs/ubic/gemma/web/services/rest/package-summary.html). See the links section(https://gemma.msl.ubc.ca/resources/restapidocs/#footer) in the footer of this page for other relevant links.  Use of this webpage and Gemma web services, including the REST API, is subject to these terms and conditions(https://pavlidislab.github.io/Gemma/terms.html). Please read these in full before continuing to use this webpage or any other part of the Gemma system.

The version of the OpenAPI document: 2.4.1
Contact: pavlab-support@msl.ubc.ca
Generated by: https://openapi-generator.tech
}
\section{Methods}{

\describe{
\strong{ get_api_info } \emph{ Retrieve an object with basic API information }

\itemize{
\item \emph{ @returnType } \link{ResponseDataObjectApiInfoValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectApiInfoValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_annotations } \emph{ Retrieve the annotations analysis of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectSetAnnotationValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectSetAnnotationValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_design } \emph{ Retrieve the design of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression } \emph{ Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } diff_ex_set integer
\item \emph{ @param } threshold numeric
\item \emph{ @param } limit integer
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression_analyses } \emph{ Retrieve the differential analyses of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{ResponseDataObjectListDifferentialExpressionAnalysisValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListDifferentialExpressionAnalysisValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression_analyses_result_sets } \emph{ Retrieve the result sets of all differential analyses of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 302 | If the dataset is found, a redirection to the corresponding getResultSets operation.

\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression } \emph{ Retrieve the expression data of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @param } filter character

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 204 | The dataset expression matrix is empty.

\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression_for_genes } \emph{ Retrieve the expression data matrix of a set of datasets and genes }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } genes list( \link{GetDatasetExpressionForGenesGenesParameterInner} )
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression_pca } \emph{ Retrieve the principal components (PCA) of a set of datasets }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } component integer
\item \emph{ @param } limit integer
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_platforms } \emph{ Retrieve the platform of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListArrayDesignValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_raw_expression } \emph{ Retrieve raw expression data of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_samples } \emph{ Retrieve the samples of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListBioAssayValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListBioAssayValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_svd } \emph{ Retrieve the singular value decomposition (SVD) of a dataset expression data }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectSimpleSVDValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectSimpleSVDValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_datasets } \emph{ Retrieve all datasets }

\itemize{
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_datasets_by_ids } \emph{ Retrieve datasets by their identifiers }

\itemize{
\item \emph{ @param } dataset list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_gene_coexpression } \emph{ Retrieve the coexpression of two given genes }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } with \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } limit integer
\item \emph{ @param } stringency integer
\item \emph{ @returnType } \link{ResponseDataObjectListCoexpressionValueObjectExt} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListCoexpressionValueObjectExt
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_go_terms } \emph{ Retrieve the GO terms associated to a gene }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListGeneOntologyTermValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneOntologyTermValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_locations } \emph{ Retrieve the physical locations of a given gene }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListPhysicalLocationValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListPhysicalLocationValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_locations_in_taxon } \emph{ Retrieve physical locations for a given gene and taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListPhysicalLocationValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListPhysicalLocationValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_probes } \emph{ Retrieve the probes associated to a genes }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_genes } \emph{ Retrieve genes matching a gene identifier }

\itemize{
\item \emph{ @param } genes list( \link{GetDatasetExpressionForGenesGenesParameterInner} )
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_annotations } \emph{ Retrieve the annotations of a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_datasets } \emph{ Retrieve all experiments within a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_element } \emph{ Retrieve the selected composite sequences for a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } probes list( \link{GetPlatformElementProbesParameterInner} )
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_element_genes } \emph{ Retrieve the genes associated to a probe in a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } probe \link{GetPlatformElementProbesParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectGeneValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_elements } \emph{ Retrieve the composite sequences for a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platforms } \emph{ Retrieve all platforms }

\itemize{
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectArrayDesignValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platforms_by_ids } \emph{ Retrieve all platforms matching a set of platform identifiers }

\itemize{
\item \emph{ @param } platform list( \link{GetPlatformAnnotationsPlatformParameter} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectArrayDesignValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_set } \emph{ Retrieve a single analysis result set by its identifier }

\itemize{
\item \emph{ @param } result_set integer
\item \emph{ @returnType } \link{ResponseDataObjectExpressionAnalysisResultSetValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectExpressionAnalysisResultSetValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The analysis result set could not be found.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_set_as_tsv } \emph{ Retrieve a single analysis result set by its identifier as a tab-separated values }

\itemize{
\item \emph{ @param } result_set_ integer

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The analysis result set could not be found.

\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_sets } \emph{ Retrieve all result sets matching the provided criteria }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } database_entries list( \link{GetResultSetsDatabaseEntriesParameterInner} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxa } \emph{ Retrieve all available taxa }

\itemize{
\item \emph{ @returnType } \link{ResponseDataObjectListTaxonValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListTaxonValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxa_by_ids } \emph{ Retrieve taxa by their identifiers }

\itemize{
\item \emph{ @param } taxa list( \link{SearchTaxonDatasetsTaxonParameter} )
\item \emph{ @returnType } \link{ResponseDataObjectListTaxonValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListTaxonValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_datasets } \emph{ Retrieve the datasets for a given taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_genes } \emph{ Retrieve all genes in a given taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_genes_overlapping_chromosome } \emph{ Retrieve genes overlapping a given region in a taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } chromosome character
\item \emph{ @param } strand character
\item \emph{ @param } start integer
\item \emph{ @param } size integer
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search } \emph{ Search everything in Gemma. }

\itemize{
\item \emph{ @param } query character
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } result_types Enum < ubic.gemma.model.common.description.BibliographicReference, ubic.gemma.model.analysis.expression.ExpressionExperimentSet, ubic.gemma.model.genome.gene.GeneSet, ubic.gemma.model.genome.Gene, ubic.gemma.model.expression.experiment.ExpressionExperiment, ubic.gemma.model.genome.biosequence.BioSequence, ubic.gemma.model.association.phenotype.PhenotypeAssociation, ubic.gemma.model.expression.arrayDesign.ArrayDesign, ubic.gemma.model.expression.designElement.CompositeSequence >
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{SearchResultsResponseDataObject} \cr

\item status code : 0 | default response

\item return type : SearchResultsResponseDataObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_annotations } \emph{ Search for annotation tags }

\itemize{
\item \emph{ @param } query list( character )
\item \emph{ @returnType } \link{ResponseDataObjectListAnnotationSearchResultValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListAnnotationSearchResultValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 400 | The search query is empty.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_datasets } \emph{ Retrieve datasets associated to an annotation tags search }

\itemize{
\item \emph{ @param } query list( character )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_taxon_datasets } \emph{ Retrieve datasets within a given taxa associated to an annotation tags search }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } query list( character )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

}


\describe{
\strong{ get_api_info } \emph{ Retrieve an object with basic API information }

\itemize{
\item \emph{ @returnType } \link{ResponseDataObjectApiInfoValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectApiInfoValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_annotations } \emph{ Retrieve the annotations analysis of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectSetAnnotationValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectSetAnnotationValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_design } \emph{ Retrieve the design of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression } \emph{ Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } diff_ex_set integer
\item \emph{ @param } threshold numeric
\item \emph{ @param } limit integer
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression_analyses } \emph{ Retrieve the differential analyses of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{ResponseDataObjectListDifferentialExpressionAnalysisValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListDifferentialExpressionAnalysisValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_differential_expression_analyses_result_sets } \emph{ Retrieve the result sets of all differential analyses of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 302 | If the dataset is found, a redirection to the corresponding getResultSets operation.

\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression } \emph{ Retrieve the expression data of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @param } filter character

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 204 | The dataset expression matrix is empty.

\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression_for_genes } \emph{ Retrieve the expression data matrix of a set of datasets and genes }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } genes list( \link{GetDatasetExpressionForGenesGenesParameterInner} )
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_expression_pca } \emph{ Retrieve the principal components (PCA) of a set of datasets }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } component integer
\item \emph{ @param } limit integer
\item \emph{ @param } keep_non_specific character
\item \emph{ @param } consolidate Enum < pickmax, pickvar, average >
\item \emph{ @returnType } \link{ResponseDataObjectListExperimentExpressionLevelsValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListExperimentExpressionLevelsValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_platforms } \emph{ Retrieve the platform of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListArrayDesignValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_raw_expression } \emph{ Retrieve raw expression data of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_samples } \emph{ Retrieve the samples of a dataset }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListBioAssayValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListBioAssayValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_dataset_svd } \emph{ Retrieve the singular value decomposition (SVD) of a dataset expression data }

\itemize{
\item \emph{ @param } dataset \link{GetResultSetsDatasetsParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectSimpleSVDValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectSimpleSVDValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The dataset does not exist.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_datasets } \emph{ Retrieve all datasets }

\itemize{
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_datasets_by_ids } \emph{ Retrieve datasets by their identifiers }

\itemize{
\item \emph{ @param } dataset list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_gene_coexpression } \emph{ Retrieve the coexpression of two given genes }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } with \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } limit integer
\item \emph{ @param } stringency integer
\item \emph{ @returnType } \link{ResponseDataObjectListCoexpressionValueObjectExt} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListCoexpressionValueObjectExt
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_go_terms } \emph{ Retrieve the GO terms associated to a gene }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListGeneOntologyTermValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneOntologyTermValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_locations } \emph{ Retrieve the physical locations of a given gene }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListPhysicalLocationValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListPhysicalLocationValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_locations_in_taxon } \emph{ Retrieve physical locations for a given gene and taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListPhysicalLocationValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListPhysicalLocationValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_gene_probes } \emph{ Retrieve the probes associated to a genes }

\itemize{
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_genes } \emph{ Retrieve genes matching a gene identifier }

\itemize{
\item \emph{ @param } genes list( \link{GetDatasetExpressionForGenesGenesParameterInner} )
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_annotations } \emph{ Retrieve the annotations of a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_datasets } \emph{ Retrieve all experiments within a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_element } \emph{ Retrieve the selected composite sequences for a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } probes list( \link{GetPlatformElementProbesParameterInner} )
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_element_genes } \emph{ Retrieve the genes associated to a probe in a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } probe \link{GetPlatformElementProbesParameterInner}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectGeneValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platform_elements } \emph{ Retrieve the composite sequences for a given platform }

\itemize{
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{PaginatedResponseDataObjectCompositeSequenceValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectCompositeSequenceValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platforms } \emph{ Retrieve all platforms }

\itemize{
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectArrayDesignValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_platforms_by_ids } \emph{ Retrieve all platforms matching a set of platform identifiers }

\itemize{
\item \emph{ @param } platform list( \link{GetPlatformAnnotationsPlatformParameter} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectArrayDesignValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectArrayDesignValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_set } \emph{ Retrieve a single analysis result set by its identifier }

\itemize{
\item \emph{ @param } result_set integer
\item \emph{ @returnType } \link{ResponseDataObjectExpressionAnalysisResultSetValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectExpressionAnalysisResultSetValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The analysis result set could not be found.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_set_as_tsv } \emph{ Retrieve a single analysis result set by its identifier as a tab-separated values }

\itemize{
\item \emph{ @param } result_set_ integer

\item status code : 200 |

\item return type : data.frame
\item response headers :

\tabular{ll}{
}
\item status code : 404 | The analysis result set could not be found.

\item response headers :

\tabular{ll}{
}
}

\strong{ get_result_sets } \emph{ Retrieve all result sets matching the provided criteria }

\itemize{
\item \emph{ @param } datasets list( \link{GetResultSetsDatasetsParameterInner} )
\item \emph{ @param } database_entries list( \link{GetResultSetsDatabaseEntriesParameterInner} )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxa } \emph{ Retrieve all available taxa }

\itemize{
\item \emph{ @returnType } \link{ResponseDataObjectListTaxonValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListTaxonValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxa_by_ids } \emph{ Retrieve taxa by their identifiers }

\itemize{
\item \emph{ @param } taxa list( \link{SearchTaxonDatasetsTaxonParameter} )
\item \emph{ @returnType } \link{ResponseDataObjectListTaxonValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListTaxonValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_datasets } \emph{ Retrieve the datasets for a given taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_genes } \emph{ Retrieve all genes in a given taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } gene \link{GetDatasetExpressionForGenesGenesParameterInner}
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ get_taxon_genes_overlapping_chromosome } \emph{ Retrieve genes overlapping a given region in a taxon }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } chromosome character
\item \emph{ @param } strand character
\item \emph{ @param } start integer
\item \emph{ @param } size integer
\item \emph{ @returnType } \link{ResponseDataObjectListGeneValueObject} \cr

\item status code : 0 | default response

\item return type : ResponseDataObjectListGeneValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search } \emph{ Search everything in Gemma. }

\itemize{
\item \emph{ @param } query character
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } platform \link{GetPlatformAnnotationsPlatformParameter}
\item \emph{ @param } result_types Enum < ubic.gemma.model.common.description.BibliographicReference, ubic.gemma.model.analysis.expression.ExpressionExperimentSet, ubic.gemma.model.genome.gene.GeneSet, ubic.gemma.model.genome.Gene, ubic.gemma.model.expression.experiment.ExpressionExperiment, ubic.gemma.model.genome.biosequence.BioSequence, ubic.gemma.model.association.phenotype.PhenotypeAssociation, ubic.gemma.model.expression.arrayDesign.ArrayDesign, ubic.gemma.model.expression.designElement.CompositeSequence >
\item \emph{ @param } limit integer
\item \emph{ @returnType } \link{SearchResultsResponseDataObject} \cr

\item status code : 0 | default response

\item return type : SearchResultsResponseDataObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_annotations } \emph{ Search for annotation tags }

\itemize{
\item \emph{ @param } query list( character )
\item \emph{ @returnType } \link{ResponseDataObjectListAnnotationSearchResultValueObject} \cr

\item status code : 200 |

\item return type : ResponseDataObjectListAnnotationSearchResultValueObject
\item response headers :

\tabular{ll}{
}
\item status code : 400 | The search query is empty.

\item return type : ResponseErrorObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_datasets } \emph{ Retrieve datasets associated to an annotation tags search }

\itemize{
\item \emph{ @param } query list( character )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

\strong{ search_taxon_datasets } \emph{ Retrieve datasets within a given taxa associated to an annotation tags search }

\itemize{
\item \emph{ @param } taxon \link{SearchTaxonDatasetsTaxonParameter}
\item \emph{ @param } query list( character )
\item \emph{ @param } filter character
\item \emph{ @param } offset integer
\item \emph{ @param } limit integer
\item \emph{ @param } sort character
\item \emph{ @returnType } \link{PaginatedResponseDataObjectExpressionExperimentValueObject} \cr

\item status code : 0 | default response

\item return type : PaginatedResponseDataObjectExpressionExperimentValueObject
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  get_api_info  ####################

library(gemma.R)

#Retrieve an object with basic API information
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_api_info(data_file = "result.txt")
result <- api_instance$get_api_info()
dput(result)


####################  get_dataset_annotations  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the annotations analysis of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_annotations(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_annotations(var_dataset)
dput(result)


####################  get_dataset_design  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the design of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_design(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_design(var_dataset)
dput(result)


####################  get_dataset_differential_expression  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_diff_ex_set <- 56 # integer | 
var_threshold <- 1.0 # numeric | 
var_limit <- 100 # integer | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_differential_expression(var_datasets, diff_ex_set = var_diff_ex_set, threshold = var_threshold, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_differential_expression(var_datasets, diff_ex_set = var_diff_ex_set, threshold = var_threshold, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_differential_expression_analyses  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the differential analyses of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_differential_expression_analyses(var_dataset, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_dataset_differential_expression_analyses(var_dataset, offset = var_offset, limit = var_limit)
dput(result)


####################  get_dataset_differential_expression_analyses_result_sets  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the result sets of all differential analyses of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

api_instance$get_dataset_differential_expression_analyses_result_sets(var_dataset)


####################  get_dataset_expression  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 
var_filter <- FALSE # character | 

#Retrieve the expression data of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression(var_dataset, filter = var_filterdata_file = "result.txt")
result <- api_instance$get_dataset_expression(var_dataset, filter = var_filter)
dput(result)


####################  get_dataset_expression_for_genes  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_genes <- GetDatasetExpressionForGenesGenesParameterInner$new() # arrayGetDatasetExpressionForGenesGenesParameterInner | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the expression data matrix of a set of datasets and genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression_for_genes(var_datasets, var_genes, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_expression_for_genes(var_datasets, var_genes, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_expression_pca  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_component <- 1 # integer | 
var_limit <- 100 # integer | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the principal components (PCA) of a set of datasets
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression_pca(var_datasets, component = var_component, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_expression_pca(var_datasets, component = var_component, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_platforms  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the platform of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_platforms(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_platforms(var_dataset)
dput(result)


####################  get_dataset_raw_expression  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve raw expression data of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_raw_expression(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_raw_expression(var_dataset)
dput(result)


####################  get_dataset_samples  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the samples of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_samples(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_samples(var_dataset)
dput(result)


####################  get_dataset_svd  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the singular value decomposition (SVD) of a dataset expression data
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_svd(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_svd(var_dataset)
dput(result)


####################  get_datasets  ####################

library(gemma.R)
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all datasets
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_datasets(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_datasets(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_datasets_by_ids  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets by their identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_datasets_by_ids(var_dataset, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_datasets_by_ids(var_dataset, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_gene_gene_coexpression  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_with <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_limit <- 100 # integer | 
var_stringency <- 1 # integer | 

#Retrieve the coexpression of two given genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_gene_coexpression(var_gene, with = var_with, limit = var_limit, stringency = var_stringencydata_file = "result.txt")
result <- api_instance$get_gene_gene_coexpression(var_gene, with = var_with, limit = var_limit, stringency = var_stringency)
dput(result)


####################  get_gene_go_terms  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve the GO terms associated to a gene
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_go_terms(var_genedata_file = "result.txt")
result <- api_instance$get_gene_go_terms(var_gene)
dput(result)


####################  get_gene_locations  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve the physical locations of a given gene
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_locations(var_genedata_file = "result.txt")
result <- api_instance$get_gene_locations(var_gene)
dput(result)


####################  get_gene_locations_in_taxon  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve physical locations for a given gene and taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_locations_in_taxon(var_taxon, var_genedata_file = "result.txt")
result <- api_instance$get_gene_locations_in_taxon(var_taxon, var_gene)
dput(result)


####################  get_gene_probes  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the probes associated to a genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_probes(var_gene, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_gene_probes(var_gene, offset = var_offset, limit = var_limit)
dput(result)


####################  get_genes  ####################

library(gemma.R)
var_genes <- GetDatasetExpressionForGenesGenesParameterInner$new() # arrayGetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve genes matching a gene identifier
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_genes(var_genesdata_file = "result.txt")
result <- api_instance$get_genes(var_genes)
dput(result)


####################  get_platform_annotations  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 

#Retrieve the annotations of a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_annotations(var_platformdata_file = "result.txt")
result <- api_instance$get_platform_annotations(var_platform)
dput(result)


####################  get_platform_datasets  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve all experiments within a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_datasets(var_platform, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_datasets(var_platform, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_element  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_probes <- GetPlatformElementProbesParameterInner$new() # arrayGetPlatformElementProbesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the selected composite sequences for a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_element(var_platform, var_probes, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_element(var_platform, var_probes, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_element_genes  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_probe <- GetPlatformElementProbesParameterInner$new() # GetPlatformElementProbesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the genes associated to a probe in a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_element_genes(var_platform, var_probe, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_element_genes(var_platform, var_probe, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_elements  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the composite sequences for a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_elements(var_platform, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_elements(var_platform, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platforms  ####################

library(gemma.R)
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all platforms
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platforms(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_platforms(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_platforms_by_ids  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # arrayGetPlatformAnnotationsPlatformParameter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all platforms matching a set of platform identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platforms_by_ids(var_platform, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_platforms_by_ids(var_platform, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_result_set  ####################

library(gemma.R)
var_result_set <- 56 # integer | 

#Retrieve a single analysis result set by its identifier
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_set(var_result_setdata_file = "result.txt")
result <- api_instance$get_result_set(var_result_set)
dput(result)


####################  get_result_set_as_tsv  ####################

library(gemma.R)
var_result_set_ <- 56 # integer | 

#Retrieve a single analysis result set by its identifier as a tab-separated values
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_set_as_tsv(var_result_set_data_file = "result.txt")
result <- api_instance$get_result_set_as_tsv(var_result_set_)
dput(result)


####################  get_result_sets  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_database_entries <- GetResultSetsDatabaseEntriesParameterInner$new() # arrayGetResultSetsDatabaseEntriesParameterInner | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all result sets matching the provided criteria
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_sets(datasets = var_datasets, database_entries = var_database_entries, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_result_sets(datasets = var_datasets, database_entries = var_database_entries, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_taxa  ####################

library(gemma.R)

#Retrieve all available taxa
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxa(data_file = "result.txt")
result <- api_instance$get_taxa()
dput(result)


####################  get_taxa_by_ids  ####################

library(gemma.R)
var_taxa <- SearchTaxonDatasetsTaxonParameter$new() # arraySearchTaxonDatasetsTaxonParameter | 

#Retrieve taxa by their identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxa_by_ids(var_taxadata_file = "result.txt")
result <- api_instance$get_taxa_by_ids(var_taxa)
dput(result)


####################  get_taxon_datasets  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve the datasets for a given taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_datasets(var_taxon, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_taxon_datasets(var_taxon, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_taxon_genes  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve all genes in a given taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_genes(var_taxon, var_genedata_file = "result.txt")
result <- api_instance$get_taxon_genes(var_taxon, var_gene)
dput(result)


####################  get_taxon_genes_overlapping_chromosome  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_chromosome <- "chromosome_example" # character | 
var_strand <- "+" # character | 
var_start <- 56 # integer | 
var_size <- 56 # integer | 

#Retrieve genes overlapping a given region in a taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_genes_overlapping_chromosome(var_taxon, var_chromosome, strand = var_strand, start = var_start, size = var_sizedata_file = "result.txt")
result <- api_instance$get_taxon_genes_overlapping_chromosome(var_taxon, var_chromosome, strand = var_strand, start = var_start, size = var_size)
dput(result)


####################  search  ####################

library(gemma.R)
var_query <- "query_example" # character | 
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_result_types <- "result_types_example" # arraycharacter | 
var_limit <- 20 # integer | 

#Search everything in Gemma.
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search(query = var_query, taxon = var_taxon, platform = var_platform, result_types = var_result_types, limit = var_limitdata_file = "result.txt")
result <- api_instance$search(query = var_query, taxon = var_taxon, platform = var_platform, result_types = var_result_types, limit = var_limit)
dput(result)


####################  search_annotations  ####################

library(gemma.R)
var_query <- "query_example" # arraycharacter | 

#Search for annotation tags
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_annotations(var_querydata_file = "result.txt")
result <- api_instance$search_annotations(var_query)
dput(result)


####################  search_datasets  ####################

library(gemma.R)
var_query <- "query_example" # arraycharacter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets associated to an annotation tags search
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_datasets(var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$search_datasets(var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  search_taxon_datasets  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_query <- "query_example" # arraycharacter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets within a given taxa associated to an annotation tags search
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_taxon_datasets(var_taxon, var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$search_taxon_datasets(var_taxon, var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


}
\dontrun{
####################  get_api_info  ####################

library(gemma.R)

#Retrieve an object with basic API information
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_api_info(data_file = "result.txt")
result <- api_instance$get_api_info()
dput(result)


####################  get_dataset_annotations  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the annotations analysis of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_annotations(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_annotations(var_dataset)
dput(result)


####################  get_dataset_design  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the design of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_design(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_design(var_dataset)
dput(result)


####################  get_dataset_differential_expression  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_diff_ex_set <- 56 # integer | 
var_threshold <- 1.0 # numeric | 
var_limit <- 100 # integer | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_differential_expression(var_datasets, diff_ex_set = var_diff_ex_set, threshold = var_threshold, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_differential_expression(var_datasets, diff_ex_set = var_diff_ex_set, threshold = var_threshold, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_differential_expression_analyses  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the differential analyses of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_differential_expression_analyses(var_dataset, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_dataset_differential_expression_analyses(var_dataset, offset = var_offset, limit = var_limit)
dput(result)


####################  get_dataset_differential_expression_analyses_result_sets  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the result sets of all differential analyses of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

api_instance$get_dataset_differential_expression_analyses_result_sets(var_dataset)


####################  get_dataset_expression  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 
var_filter <- FALSE # character | 

#Retrieve the expression data of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression(var_dataset, filter = var_filterdata_file = "result.txt")
result <- api_instance$get_dataset_expression(var_dataset, filter = var_filter)
dput(result)


####################  get_dataset_expression_for_genes  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_genes <- GetDatasetExpressionForGenesGenesParameterInner$new() # arrayGetDatasetExpressionForGenesGenesParameterInner | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the expression data matrix of a set of datasets and genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression_for_genes(var_datasets, var_genes, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_expression_for_genes(var_datasets, var_genes, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_expression_pca  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_component <- 1 # integer | 
var_limit <- 100 # integer | 
var_keep_non_specific <- FALSE # character | 
var_consolidate <- "consolidate_example" # character | 

#Retrieve the principal components (PCA) of a set of datasets
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_expression_pca(var_datasets, component = var_component, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidatedata_file = "result.txt")
result <- api_instance$get_dataset_expression_pca(var_datasets, component = var_component, limit = var_limit, keep_non_specific = var_keep_non_specific, consolidate = var_consolidate)
dput(result)


####################  get_dataset_platforms  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the platform of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_platforms(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_platforms(var_dataset)
dput(result)


####################  get_dataset_raw_expression  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve raw expression data of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_raw_expression(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_raw_expression(var_dataset)
dput(result)


####################  get_dataset_samples  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the samples of a dataset
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_samples(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_samples(var_dataset)
dput(result)


####################  get_dataset_svd  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # GetResultSetsDatasetsParameterInner | 

#Retrieve the singular value decomposition (SVD) of a dataset expression data
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_dataset_svd(var_datasetdata_file = "result.txt")
result <- api_instance$get_dataset_svd(var_dataset)
dput(result)


####################  get_datasets  ####################

library(gemma.R)
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all datasets
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_datasets(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_datasets(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_datasets_by_ids  ####################

library(gemma.R)
var_dataset <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets by their identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_datasets_by_ids(var_dataset, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_datasets_by_ids(var_dataset, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_gene_gene_coexpression  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_with <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_limit <- 100 # integer | 
var_stringency <- 1 # integer | 

#Retrieve the coexpression of two given genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_gene_coexpression(var_gene, with = var_with, limit = var_limit, stringency = var_stringencydata_file = "result.txt")
result <- api_instance$get_gene_gene_coexpression(var_gene, with = var_with, limit = var_limit, stringency = var_stringency)
dput(result)


####################  get_gene_go_terms  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve the GO terms associated to a gene
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_go_terms(var_genedata_file = "result.txt")
result <- api_instance$get_gene_go_terms(var_gene)
dput(result)


####################  get_gene_locations  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve the physical locations of a given gene
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_locations(var_genedata_file = "result.txt")
result <- api_instance$get_gene_locations(var_gene)
dput(result)


####################  get_gene_locations_in_taxon  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve physical locations for a given gene and taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_locations_in_taxon(var_taxon, var_genedata_file = "result.txt")
result <- api_instance$get_gene_locations_in_taxon(var_taxon, var_gene)
dput(result)


####################  get_gene_probes  ####################

library(gemma.R)
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the probes associated to a genes
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_gene_probes(var_gene, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_gene_probes(var_gene, offset = var_offset, limit = var_limit)
dput(result)


####################  get_genes  ####################

library(gemma.R)
var_genes <- GetDatasetExpressionForGenesGenesParameterInner$new() # arrayGetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve genes matching a gene identifier
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_genes(var_genesdata_file = "result.txt")
result <- api_instance$get_genes(var_genes)
dput(result)


####################  get_platform_annotations  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 

#Retrieve the annotations of a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_annotations(var_platformdata_file = "result.txt")
result <- api_instance$get_platform_annotations(var_platform)
dput(result)


####################  get_platform_datasets  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve all experiments within a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_datasets(var_platform, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_datasets(var_platform, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_element  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_probes <- GetPlatformElementProbesParameterInner$new() # arrayGetPlatformElementProbesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the selected composite sequences for a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_element(var_platform, var_probes, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_element(var_platform, var_probes, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_element_genes  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_probe <- GetPlatformElementProbesParameterInner$new() # GetPlatformElementProbesParameterInner | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the genes associated to a probe in a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_element_genes(var_platform, var_probe, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_element_genes(var_platform, var_probe, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platform_elements  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 

#Retrieve the composite sequences for a given platform
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platform_elements(var_platform, offset = var_offset, limit = var_limitdata_file = "result.txt")
result <- api_instance$get_platform_elements(var_platform, offset = var_offset, limit = var_limit)
dput(result)


####################  get_platforms  ####################

library(gemma.R)
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all platforms
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platforms(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_platforms(filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_platforms_by_ids  ####################

library(gemma.R)
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # arrayGetPlatformAnnotationsPlatformParameter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all platforms matching a set of platform identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_platforms_by_ids(var_platform, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_platforms_by_ids(var_platform, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_result_set  ####################

library(gemma.R)
var_result_set <- 56 # integer | 

#Retrieve a single analysis result set by its identifier
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_set(var_result_setdata_file = "result.txt")
result <- api_instance$get_result_set(var_result_set)
dput(result)


####################  get_result_set_as_tsv  ####################

library(gemma.R)
var_result_set_ <- 56 # integer | 

#Retrieve a single analysis result set by its identifier as a tab-separated values
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_set_as_tsv(var_result_set_data_file = "result.txt")
result <- api_instance$get_result_set_as_tsv(var_result_set_)
dput(result)


####################  get_result_sets  ####################

library(gemma.R)
var_datasets <- GetResultSetsDatasetsParameterInner$new() # arrayGetResultSetsDatasetsParameterInner | 
var_database_entries <- GetResultSetsDatabaseEntriesParameterInner$new() # arrayGetResultSetsDatabaseEntriesParameterInner | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve all result sets matching the provided criteria
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_result_sets(datasets = var_datasets, database_entries = var_database_entries, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_result_sets(datasets = var_datasets, database_entries = var_database_entries, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_taxa  ####################

library(gemma.R)

#Retrieve all available taxa
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxa(data_file = "result.txt")
result <- api_instance$get_taxa()
dput(result)


####################  get_taxa_by_ids  ####################

library(gemma.R)
var_taxa <- SearchTaxonDatasetsTaxonParameter$new() # arraySearchTaxonDatasetsTaxonParameter | 

#Retrieve taxa by their identifiers
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxa_by_ids(var_taxadata_file = "result.txt")
result <- api_instance$get_taxa_by_ids(var_taxa)
dput(result)


####################  get_taxon_datasets  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve the datasets for a given taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_datasets(var_taxon, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$get_taxon_datasets(var_taxon, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  get_taxon_genes  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_gene <- GetDatasetExpressionForGenesGenesParameterInner$new() # GetDatasetExpressionForGenesGenesParameterInner | 

#Retrieve all genes in a given taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_genes(var_taxon, var_genedata_file = "result.txt")
result <- api_instance$get_taxon_genes(var_taxon, var_gene)
dput(result)


####################  get_taxon_genes_overlapping_chromosome  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_chromosome <- "chromosome_example" # character | 
var_strand <- "+" # character | 
var_start <- 56 # integer | 
var_size <- 56 # integer | 

#Retrieve genes overlapping a given region in a taxon
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$get_taxon_genes_overlapping_chromosome(var_taxon, var_chromosome, strand = var_strand, start = var_start, size = var_sizedata_file = "result.txt")
result <- api_instance$get_taxon_genes_overlapping_chromosome(var_taxon, var_chromosome, strand = var_strand, start = var_start, size = var_size)
dput(result)


####################  search  ####################

library(gemma.R)
var_query <- "query_example" # character | 
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_platform <- GetPlatformAnnotationsPlatformParameter$new() # GetPlatformAnnotationsPlatformParameter | 
var_result_types <- "result_types_example" # arraycharacter | 
var_limit <- 20 # integer | 

#Search everything in Gemma.
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search(query = var_query, taxon = var_taxon, platform = var_platform, result_types = var_result_types, limit = var_limitdata_file = "result.txt")
result <- api_instance$search(query = var_query, taxon = var_taxon, platform = var_platform, result_types = var_result_types, limit = var_limit)
dput(result)


####################  search_annotations  ####################

library(gemma.R)
var_query <- "query_example" # arraycharacter | 

#Search for annotation tags
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_annotations(var_querydata_file = "result.txt")
result <- api_instance$search_annotations(var_query)
dput(result)


####################  search_datasets  ####################

library(gemma.R)
var_query <- "query_example" # arraycharacter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets associated to an annotation tags search
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_datasets(var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$search_datasets(var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


####################  search_taxon_datasets  ####################

library(gemma.R)
var_taxon <- SearchTaxonDatasetsTaxonParameter$new() # SearchTaxonDatasetsTaxonParameter | 
var_query <- "query_example" # arraycharacter | 
var_filter <- "" # character | 
var_offset <- 0 # integer | 
var_limit <- 20 # integer | 
var_sort <- "+id" # character | 

#Retrieve datasets within a given taxa associated to an annotation tags search
api_instance <- DefaultApi$new()

# Configure HTTP basic authorization: basicAuth
api_instance$api_client$username <- Sys.getenv("USERNAME")
api_instance$api_client$password <- Sys.getenv("PASSWORD")

# Configure API key authorization: cookieAuth
api_instance$api_client$api_keys"JSESSIONID" <- Sys.getenv("API_KEY")

# to save the result into a file, simply add the optional `data_file` parameter, e.g.
# result <- api_instance$search_taxon_datasets(var_taxon, var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sortdata_file = "result.txt")
result <- api_instance$search_taxon_datasets(var_taxon, var_query, filter = var_filter, offset = var_offset, limit = var_limit, sort = var_sort)
dput(result)


}
}
\keyword{(PCA)}
\keyword{(SVD)}
\keyword{API}
\keyword{DefaultApi.}
\keyword{GO}
\keyword{Gemma.}
\keyword{Initialize}
\keyword{Retrieve}
\keyword{Search}
\keyword{a}
\keyword{all}
\keyword{an}
\keyword{analyses}
\keyword{analysis}
\keyword{and}
\keyword{annotation}
\keyword{annotations}
\keyword{as}
\keyword{associated}
\keyword{available}
\keyword{basic}
\keyword{by}
\keyword{coexpression}
\keyword{components}
\keyword{composite}
\keyword{criteria}
\keyword{data}
\keyword{dataset}
\keyword{datasets}
\keyword{decomposition}
\keyword{design}
\keyword{differential}
\keyword{everything}
\keyword{experiments}
\keyword{expression}
\keyword{expressions}
\keyword{for}
\keyword{gene}
\keyword{genes}
\keyword{given}
\keyword{identifier}
\keyword{identifiers}
\keyword{in}
\keyword{information}
\keyword{internal}
\keyword{its}
\keyword{levels}
\keyword{locations}
\keyword{matching}
\keyword{matrix}
\keyword{new}
\keyword{object}
\keyword{of}
\keyword{on}
\keyword{overlapping}
\keyword{physical}
\keyword{platform}
\keyword{platforms}
\keyword{principal}
\keyword{probe}
\keyword{probes}
\keyword{provided}
\keyword{raw}
\keyword{region}
\keyword{result}
\keyword{samples}
\keyword{search}
\keyword{selected}
\keyword{sequences}
\keyword{set}
\keyword{sets}
\keyword{single}
\keyword{singular}
\keyword{subject}
\keyword{tab-separated}
\keyword{tags}
\keyword{taxa}
\keyword{taxon}
\keyword{terms}
\keyword{the}
\keyword{their}
\keyword{threshold}
\keyword{to}
\keyword{two}
\keyword{value}
\keyword{values}
\keyword{with}
\keyword{within}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DefaultApi-new}{\code{DefaultApi$new()}}
\item \href{#method-DefaultApi-get_api_info}{\code{DefaultApi$get_api_info()}}
\item \href{#method-DefaultApi-get_api_info_with_http_info}{\code{DefaultApi$get_api_info_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_annotations}{\code{DefaultApi$get_dataset_annotations()}}
\item \href{#method-DefaultApi-get_dataset_annotations_with_http_info}{\code{DefaultApi$get_dataset_annotations_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_design}{\code{DefaultApi$get_dataset_design()}}
\item \href{#method-DefaultApi-get_dataset_design_with_http_info}{\code{DefaultApi$get_dataset_design_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression}{\code{DefaultApi$get_dataset_differential_expression()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses}{\code{DefaultApi$get_dataset_differential_expression_analyses()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_analyses_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_result_sets}{\code{DefaultApi$get_dataset_differential_expression_analyses_result_sets()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_analyses_result_sets_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression}{\code{DefaultApi$get_dataset_expression()}}
\item \href{#method-DefaultApi-get_dataset_expression_with_http_info}{\code{DefaultApi$get_dataset_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression_for_genes}{\code{DefaultApi$get_dataset_expression_for_genes()}}
\item \href{#method-DefaultApi-get_dataset_expression_for_genes_with_http_info}{\code{DefaultApi$get_dataset_expression_for_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression_pca}{\code{DefaultApi$get_dataset_expression_pca()}}
\item \href{#method-DefaultApi-get_dataset_expression_pca_with_http_info}{\code{DefaultApi$get_dataset_expression_pca_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_platforms}{\code{DefaultApi$get_dataset_platforms()}}
\item \href{#method-DefaultApi-get_dataset_platforms_with_http_info}{\code{DefaultApi$get_dataset_platforms_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_raw_expression}{\code{DefaultApi$get_dataset_raw_expression()}}
\item \href{#method-DefaultApi-get_dataset_raw_expression_with_http_info}{\code{DefaultApi$get_dataset_raw_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_samples}{\code{DefaultApi$get_dataset_samples()}}
\item \href{#method-DefaultApi-get_dataset_samples_with_http_info}{\code{DefaultApi$get_dataset_samples_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_svd}{\code{DefaultApi$get_dataset_svd()}}
\item \href{#method-DefaultApi-get_dataset_svd_with_http_info}{\code{DefaultApi$get_dataset_svd_with_http_info()}}
\item \href{#method-DefaultApi-get_datasets}{\code{DefaultApi$get_datasets()}}
\item \href{#method-DefaultApi-get_datasets_with_http_info}{\code{DefaultApi$get_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_datasets_by_ids}{\code{DefaultApi$get_datasets_by_ids()}}
\item \href{#method-DefaultApi-get_datasets_by_ids_with_http_info}{\code{DefaultApi$get_datasets_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_gene_coexpression}{\code{DefaultApi$get_gene_gene_coexpression()}}
\item \href{#method-DefaultApi-get_gene_gene_coexpression_with_http_info}{\code{DefaultApi$get_gene_gene_coexpression_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_go_terms}{\code{DefaultApi$get_gene_go_terms()}}
\item \href{#method-DefaultApi-get_gene_go_terms_with_http_info}{\code{DefaultApi$get_gene_go_terms_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_locations}{\code{DefaultApi$get_gene_locations()}}
\item \href{#method-DefaultApi-get_gene_locations_with_http_info}{\code{DefaultApi$get_gene_locations_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_locations_in_taxon}{\code{DefaultApi$get_gene_locations_in_taxon()}}
\item \href{#method-DefaultApi-get_gene_locations_in_taxon_with_http_info}{\code{DefaultApi$get_gene_locations_in_taxon_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_probes}{\code{DefaultApi$get_gene_probes()}}
\item \href{#method-DefaultApi-get_gene_probes_with_http_info}{\code{DefaultApi$get_gene_probes_with_http_info()}}
\item \href{#method-DefaultApi-get_genes}{\code{DefaultApi$get_genes()}}
\item \href{#method-DefaultApi-get_genes_with_http_info}{\code{DefaultApi$get_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_annotations}{\code{DefaultApi$get_platform_annotations()}}
\item \href{#method-DefaultApi-get_platform_annotations_with_http_info}{\code{DefaultApi$get_platform_annotations_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_datasets}{\code{DefaultApi$get_platform_datasets()}}
\item \href{#method-DefaultApi-get_platform_datasets_with_http_info}{\code{DefaultApi$get_platform_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_element}{\code{DefaultApi$get_platform_element()}}
\item \href{#method-DefaultApi-get_platform_element_with_http_info}{\code{DefaultApi$get_platform_element_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_element_genes}{\code{DefaultApi$get_platform_element_genes()}}
\item \href{#method-DefaultApi-get_platform_element_genes_with_http_info}{\code{DefaultApi$get_platform_element_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_elements}{\code{DefaultApi$get_platform_elements()}}
\item \href{#method-DefaultApi-get_platform_elements_with_http_info}{\code{DefaultApi$get_platform_elements_with_http_info()}}
\item \href{#method-DefaultApi-get_platforms}{\code{DefaultApi$get_platforms()}}
\item \href{#method-DefaultApi-get_platforms_with_http_info}{\code{DefaultApi$get_platforms_with_http_info()}}
\item \href{#method-DefaultApi-get_platforms_by_ids}{\code{DefaultApi$get_platforms_by_ids()}}
\item \href{#method-DefaultApi-get_platforms_by_ids_with_http_info}{\code{DefaultApi$get_platforms_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_result_set}{\code{DefaultApi$get_result_set()}}
\item \href{#method-DefaultApi-get_result_set_with_http_info}{\code{DefaultApi$get_result_set_with_http_info()}}
\item \href{#method-DefaultApi-get_result_set_as_tsv}{\code{DefaultApi$get_result_set_as_tsv()}}
\item \href{#method-DefaultApi-get_result_set_as_tsv_with_http_info}{\code{DefaultApi$get_result_set_as_tsv_with_http_info()}}
\item \href{#method-DefaultApi-get_result_sets}{\code{DefaultApi$get_result_sets()}}
\item \href{#method-DefaultApi-get_result_sets_with_http_info}{\code{DefaultApi$get_result_sets_with_http_info()}}
\item \href{#method-DefaultApi-get_taxa}{\code{DefaultApi$get_taxa()}}
\item \href{#method-DefaultApi-get_taxa_with_http_info}{\code{DefaultApi$get_taxa_with_http_info()}}
\item \href{#method-DefaultApi-get_taxa_by_ids}{\code{DefaultApi$get_taxa_by_ids()}}
\item \href{#method-DefaultApi-get_taxa_by_ids_with_http_info}{\code{DefaultApi$get_taxa_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_datasets}{\code{DefaultApi$get_taxon_datasets()}}
\item \href{#method-DefaultApi-get_taxon_datasets_with_http_info}{\code{DefaultApi$get_taxon_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_genes}{\code{DefaultApi$get_taxon_genes()}}
\item \href{#method-DefaultApi-get_taxon_genes_with_http_info}{\code{DefaultApi$get_taxon_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_genes_overlapping_chromosome}{\code{DefaultApi$get_taxon_genes_overlapping_chromosome()}}
\item \href{#method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info}{\code{DefaultApi$get_taxon_genes_overlapping_chromosome_with_http_info()}}
\item \href{#method-DefaultApi-search}{\code{DefaultApi$search()}}
\item \href{#method-DefaultApi-search_with_http_info}{\code{DefaultApi$search_with_http_info()}}
\item \href{#method-DefaultApi-search_annotations}{\code{DefaultApi$search_annotations()}}
\item \href{#method-DefaultApi-search_annotations_with_http_info}{\code{DefaultApi$search_annotations_with_http_info()}}
\item \href{#method-DefaultApi-search_datasets}{\code{DefaultApi$search_datasets()}}
\item \href{#method-DefaultApi-search_datasets_with_http_info}{\code{DefaultApi$search_datasets_with_http_info()}}
\item \href{#method-DefaultApi-search_taxon_datasets}{\code{DefaultApi$search_taxon_datasets()}}
\item \href{#method-DefaultApi-search_taxon_datasets_with_http_info}{\code{DefaultApi$search_taxon_datasets_with_http_info()}}
\item \href{#method-DefaultApi-clone}{\code{DefaultApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DefaultApi.


Retrieve an object with basic API information


Retrieve an object with basic API information


Retrieve the annotations analysis of a dataset


Retrieve the annotations analysis of a dataset


Retrieve the design of a dataset


Retrieve the design of a dataset


Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions


Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions


Retrieve the differential analyses of a dataset


Retrieve the differential analyses of a dataset


Retrieve the result sets of all differential analyses of a dataset


Retrieve the result sets of all differential analyses of a dataset


Retrieve the expression data of a dataset


Retrieve the expression data of a dataset


Retrieve the expression data matrix of a set of datasets and genes


Retrieve the expression data matrix of a set of datasets and genes


Retrieve the principal components (PCA) of a set of datasets


Retrieve the principal components (PCA) of a set of datasets


Retrieve the platform of a dataset


Retrieve the platform of a dataset


Retrieve raw expression data of a dataset


Retrieve raw expression data of a dataset


Retrieve the samples of a dataset


Retrieve the samples of a dataset


Retrieve the singular value decomposition (SVD) of a dataset expression data


Retrieve the singular value decomposition (SVD) of a dataset expression data


Retrieve all datasets


Retrieve all datasets


Retrieve datasets by their identifiers


Retrieve datasets by their identifiers


Retrieve the coexpression of two given genes


Retrieve the coexpression of two given genes


Retrieve the GO terms associated to a gene


Retrieve the GO terms associated to a gene


Retrieve the physical locations of a given gene


Retrieve the physical locations of a given gene


Retrieve physical locations for a given gene and taxon


Retrieve physical locations for a given gene and taxon


Retrieve the probes associated to a genes


Retrieve the probes associated to a genes


Retrieve genes matching a gene identifier


Retrieve genes matching a gene identifier


Retrieve the annotations of a given platform


Retrieve the annotations of a given platform


Retrieve all experiments within a given platform


Retrieve all experiments within a given platform


Retrieve the selected composite sequences for a given platform


Retrieve the selected composite sequences for a given platform


Retrieve the genes associated to a probe in a given platform


Retrieve the genes associated to a probe in a given platform


Retrieve the composite sequences for a given platform


Retrieve the composite sequences for a given platform


Retrieve all platforms


Retrieve all platforms


Retrieve all platforms matching a set of platform identifiers


Retrieve all platforms matching a set of platform identifiers


Retrieve a single analysis result set by its identifier


Retrieve a single analysis result set by its identifier


Retrieve a single analysis result set by its identifier as a tab-separated values


Retrieve a single analysis result set by its identifier as a tab-separated values


Retrieve all result sets matching the provided criteria


Retrieve all result sets matching the provided criteria


Retrieve all available taxa


Retrieve all available taxa


Retrieve taxa by their identifiers


Retrieve taxa by their identifiers


Retrieve the datasets for a given taxon


Retrieve the datasets for a given taxon


Retrieve all genes in a given taxon


Retrieve all genes in a given taxon


Retrieve genes overlapping a given region in a taxon


Retrieve genes overlapping a given region in a taxon


Search everything in Gemma.


Search everything in Gemma.


Search for annotation tags


Search for annotation tags


Retrieve datasets associated to an annotation tags search


Retrieve datasets associated to an annotation tags search


Retrieve datasets within a given taxa associated to an annotation tags search


Retrieve datasets within a given taxa associated to an annotation tags search
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{diff_ex_set}}{(optional) No description}

\item{\code{threshold}}{(optional) No description (default value: 1.0)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{diff_ex_set}}{(optional) No description}

\item{\code{threshold}}{(optional) No description (default value: 1.0)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{genes}}{}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{genes}}{}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{component}}{(optional) No description (default value: 1)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{}

\item{\code{component}}{(optional) No description (default value: 1)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{with}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{stringency}}{(optional) No description (default value: 1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{with}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{stringency}}{(optional) No description (default value: 1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{gene}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{genes}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{genes}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{probes}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{probes}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{probe}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{probe}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{platform}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{result_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{result_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{result_set_}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{result_set_}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{(optional) No description}

\item{\code{database_entries}}{(optional) No description}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{datasets}}{(optional) No description}

\item{\code{database_entries}}{(optional) No description}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxa}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxa}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{chromosome}}{}

\item{\code{strand}}{(optional) No description (default value: "+")}

\item{\code{start}}{(optional) No description}

\item{\code{size}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{chromosome}}{}

\item{\code{strand}}{(optional) No description (default value: "+")}

\item{\code{start}}{(optional) No description}

\item{\code{size}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{(optional) No description}

\item{\code{taxon}}{(optional) No description}

\item{\code{platform}}{(optional) No description}

\item{\code{result_types}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{(optional) No description}

\item{\code{taxon}}{(optional) No description}

\item{\code{platform}}{(optional) No description}

\item{\code{result_types}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}

\item{\code{taxon}}{}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectApiInfoValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_api_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_api_info}{}}}
\subsection{Method \code{get_api_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_api_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_api_info_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_api_info_with_http_info}{}}}
\subsection{Method \code{get_api_info_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_api_info_with_http_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_annotations}{}}}
\subsection{Method \code{get_dataset_annotations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_annotations(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_annotations_with_http_info}{}}}
\subsection{Method \code{get_dataset_annotations_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_annotations_with_http_info(
  dataset,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_design"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_design}{}}}
\subsection{Method \code{get_dataset_design()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_design(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_design_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_design_with_http_info}{}}}
\subsection{Method \code{get_dataset_design_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_design_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression}{}}}
\subsection{Method \code{get_dataset_differential_expression()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression(
  datasets,
  diff_ex_set = NULL,
  threshold = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_with_http_info(
  datasets,
  diff_ex_set = NULL,
  threshold = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses(
  dataset,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_with_http_info(
  dataset,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_result_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_result_sets}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_result_sets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_result_sets(
  dataset,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_result_sets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_result_sets_with_http_info(
  dataset,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression}{}}}
\subsection{Method \code{get_dataset_expression()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression(
  dataset,
  filter = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_with_http_info(
  dataset,
  filter = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_for_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_for_genes}{}}}
\subsection{Method \code{get_dataset_expression_for_genes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_for_genes(
  datasets,
  genes,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_for_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_for_genes_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_for_genes_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_for_genes_with_http_info(
  datasets,
  genes,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_pca"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_pca}{}}}
\subsection{Method \code{get_dataset_expression_pca()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_pca(
  datasets,
  component = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_pca_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_pca_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_pca_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_pca_with_http_info(
  datasets,
  component = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_platforms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_platforms}{}}}
\subsection{Method \code{get_dataset_platforms()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_platforms(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_platforms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_platforms_with_http_info}{}}}
\subsection{Method \code{get_dataset_platforms_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_platforms_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_raw_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_raw_expression}{}}}
\subsection{Method \code{get_dataset_raw_expression()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_raw_expression(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_raw_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_raw_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_raw_expression_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_raw_expression_with_http_info(
  dataset,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_samples"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_samples}{}}}
\subsection{Method \code{get_dataset_samples()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_samples(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_samples_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_samples_with_http_info}{}}}
\subsection{Method \code{get_dataset_samples_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_samples_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_svd"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_svd}{}}}
\subsection{Method \code{get_dataset_svd()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_svd(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_svd_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_svd_with_http_info}{}}}
\subsection{Method \code{get_dataset_svd_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_svd_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets}{}}}
\subsection{Method \code{get_datasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_with_http_info}{}}}
\subsection{Method \code{get_datasets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_with_http_info(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_by_ids}{}}}
\subsection{Method \code{get_datasets_by_ids()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_by_ids(
  dataset,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_by_ids_with_http_info}{}}}
\subsection{Method \code{get_datasets_by_ids_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_by_ids_with_http_info(
  dataset,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_gene_coexpression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_gene_coexpression}{}}}
\subsection{Method \code{get_gene_gene_coexpression()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_gene_coexpression(
  gene,
  with = NULL,
  limit = 100,
  stringency = 1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_gene_coexpression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_gene_coexpression_with_http_info}{}}}
\subsection{Method \code{get_gene_gene_coexpression_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_gene_coexpression_with_http_info(
  gene,
  with = NULL,
  limit = 100,
  stringency = 1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_go_terms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_go_terms}{}}}
\subsection{Method \code{get_gene_go_terms()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_go_terms(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_go_terms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_go_terms_with_http_info}{}}}
\subsection{Method \code{get_gene_go_terms_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_go_terms_with_http_info(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations}{}}}
\subsection{Method \code{get_gene_locations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_with_http_info}{}}}
\subsection{Method \code{get_gene_locations_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_with_http_info(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_in_taxon"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_in_taxon}{}}}
\subsection{Method \code{get_gene_locations_in_taxon()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_in_taxon(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_in_taxon_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_in_taxon_with_http_info}{}}}
\subsection{Method \code{get_gene_locations_in_taxon_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_in_taxon_with_http_info(
  taxon,
  gene,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_probes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_probes}{}}}
\subsection{Method \code{get_gene_probes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_probes(gene, offset = 0, limit = 20, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_probes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_probes_with_http_info}{}}}
\subsection{Method \code{get_gene_probes_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_probes_with_http_info(
  gene,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_genes}{}}}
\subsection{Method \code{get_genes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_genes(genes, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_genes_with_http_info}{}}}
\subsection{Method \code{get_genes_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_genes_with_http_info(genes, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_annotations}{}}}
\subsection{Method \code{get_platform_annotations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_annotations(platform, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_annotations_with_http_info}{}}}
\subsection{Method \code{get_platform_annotations_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_annotations_with_http_info(
  platform,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_datasets}{}}}
\subsection{Method \code{get_platform_datasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_datasets(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_datasets_with_http_info}{}}}
\subsection{Method \code{get_platform_datasets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_datasets_with_http_info(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element}{}}}
\subsection{Method \code{get_platform_element()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element(
  platform,
  probes,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_with_http_info}{}}}
\subsection{Method \code{get_platform_element_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_with_http_info(
  platform,
  probes,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_genes}{}}}
\subsection{Method \code{get_platform_element_genes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_genes(
  platform,
  probe,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_genes_with_http_info}{}}}
\subsection{Method \code{get_platform_element_genes_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_genes_with_http_info(
  platform,
  probe,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_elements"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_elements}{}}}
\subsection{Method \code{get_platform_elements()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_elements(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_elements_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_elements_with_http_info}{}}}
\subsection{Method \code{get_platform_elements_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_elements_with_http_info(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms}{}}}
\subsection{Method \code{get_platforms()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_with_http_info}{}}}
\subsection{Method \code{get_platforms_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_with_http_info(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_by_ids}{}}}
\subsection{Method \code{get_platforms_by_ids()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_by_ids(
  platform,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_by_ids_with_http_info}{}}}
\subsection{Method \code{get_platforms_by_ids_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_by_ids_with_http_info(
  platform,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set}{}}}
\subsection{Method \code{get_result_set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set(result_set, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_with_http_info}{}}}
\subsection{Method \code{get_result_set_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_with_http_info(result_set, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_as_tsv"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_as_tsv}{}}}
\subsection{Method \code{get_result_set_as_tsv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_as_tsv(result_set_, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_as_tsv_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_as_tsv_with_http_info}{}}}
\subsection{Method \code{get_result_set_as_tsv_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_as_tsv_with_http_info(
  result_set_,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_sets}{}}}
\subsection{Method \code{get_result_sets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_sets(
  datasets = NULL,
  database_entries = NULL,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_sets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_sets_with_http_info}{}}}
\subsection{Method \code{get_result_sets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_sets_with_http_info(
  datasets = NULL,
  database_entries = NULL,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa}{}}}
\subsection{Method \code{get_taxa()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_with_http_info}{}}}
\subsection{Method \code{get_taxa_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_with_http_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_by_ids}{}}}
\subsection{Method \code{get_taxa_by_ids()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_by_ids(taxa, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_by_ids_with_http_info}{}}}
\subsection{Method \code{get_taxa_by_ids_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_by_ids_with_http_info(taxa, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_datasets}{}}}
\subsection{Method \code{get_taxon_datasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_datasets(
  taxon,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_datasets_with_http_info}{}}}
\subsection{Method \code{get_taxon_datasets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_datasets_with_http_info(
  taxon,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes}{}}}
\subsection{Method \code{get_taxon_genes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_with_http_info}{}}}
\subsection{Method \code{get_taxon_genes_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_with_http_info(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_overlapping_chromosome"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_overlapping_chromosome}{}}}
\subsection{Method \code{get_taxon_genes_overlapping_chromosome()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_overlapping_chromosome(
  taxon,
  chromosome,
  strand = "+",
  start = NULL,
  size = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info}{}}}
\subsection{Method \code{get_taxon_genes_overlapping_chromosome_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_overlapping_chromosome_with_http_info(
  taxon,
  chromosome,
  strand = "+",
  start = NULL,
  size = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search}{}}}
\subsection{Method \code{search()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search(
  query = NULL,
  taxon = NULL,
  platform = NULL,
  result_types = NULL,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_with_http_info}{}}}
\subsection{Method \code{search_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_with_http_info(
  query = NULL,
  taxon = NULL,
  platform = NULL,
  result_types = NULL,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_annotations}{}}}
\subsection{Method \code{search_annotations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_annotations(query, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_annotations_with_http_info}{}}}
\subsection{Method \code{search_annotations_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_annotations_with_http_info(query, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_datasets}{}}}
\subsection{Method \code{search_datasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_datasets(
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_datasets_with_http_info}{}}}
\subsection{Method \code{search_datasets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_datasets_with_http_info(
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_taxon_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_taxon_datasets}{}}}
\subsection{Method \code{search_taxon_datasets()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_taxon_datasets(
  taxon,
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_taxon_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_taxon_datasets_with_http_info}{}}}
\subsection{Method \code{search_taxon_datasets_with_http_info()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_taxon_datasets_with_http_info(
  taxon,
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{api_client}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DefaultApi-new}{\code{DefaultApi$new()}}
\item \href{#method-DefaultApi-get_api_info}{\code{DefaultApi$get_api_info()}}
\item \href{#method-DefaultApi-get_api_info_with_http_info}{\code{DefaultApi$get_api_info_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_annotations}{\code{DefaultApi$get_dataset_annotations()}}
\item \href{#method-DefaultApi-get_dataset_annotations_with_http_info}{\code{DefaultApi$get_dataset_annotations_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_design}{\code{DefaultApi$get_dataset_design()}}
\item \href{#method-DefaultApi-get_dataset_design_with_http_info}{\code{DefaultApi$get_dataset_design_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression}{\code{DefaultApi$get_dataset_differential_expression()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses}{\code{DefaultApi$get_dataset_differential_expression_analyses()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_analyses_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_result_sets}{\code{DefaultApi$get_dataset_differential_expression_analyses_result_sets()}}
\item \href{#method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info}{\code{DefaultApi$get_dataset_differential_expression_analyses_result_sets_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression}{\code{DefaultApi$get_dataset_expression()}}
\item \href{#method-DefaultApi-get_dataset_expression_with_http_info}{\code{DefaultApi$get_dataset_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression_for_genes}{\code{DefaultApi$get_dataset_expression_for_genes()}}
\item \href{#method-DefaultApi-get_dataset_expression_for_genes_with_http_info}{\code{DefaultApi$get_dataset_expression_for_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_expression_pca}{\code{DefaultApi$get_dataset_expression_pca()}}
\item \href{#method-DefaultApi-get_dataset_expression_pca_with_http_info}{\code{DefaultApi$get_dataset_expression_pca_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_platforms}{\code{DefaultApi$get_dataset_platforms()}}
\item \href{#method-DefaultApi-get_dataset_platforms_with_http_info}{\code{DefaultApi$get_dataset_platforms_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_raw_expression}{\code{DefaultApi$get_dataset_raw_expression()}}
\item \href{#method-DefaultApi-get_dataset_raw_expression_with_http_info}{\code{DefaultApi$get_dataset_raw_expression_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_samples}{\code{DefaultApi$get_dataset_samples()}}
\item \href{#method-DefaultApi-get_dataset_samples_with_http_info}{\code{DefaultApi$get_dataset_samples_with_http_info()}}
\item \href{#method-DefaultApi-get_dataset_svd}{\code{DefaultApi$get_dataset_svd()}}
\item \href{#method-DefaultApi-get_dataset_svd_with_http_info}{\code{DefaultApi$get_dataset_svd_with_http_info()}}
\item \href{#method-DefaultApi-get_datasets}{\code{DefaultApi$get_datasets()}}
\item \href{#method-DefaultApi-get_datasets_with_http_info}{\code{DefaultApi$get_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_datasets_by_ids}{\code{DefaultApi$get_datasets_by_ids()}}
\item \href{#method-DefaultApi-get_datasets_by_ids_with_http_info}{\code{DefaultApi$get_datasets_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_gene_coexpression}{\code{DefaultApi$get_gene_gene_coexpression()}}
\item \href{#method-DefaultApi-get_gene_gene_coexpression_with_http_info}{\code{DefaultApi$get_gene_gene_coexpression_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_go_terms}{\code{DefaultApi$get_gene_go_terms()}}
\item \href{#method-DefaultApi-get_gene_go_terms_with_http_info}{\code{DefaultApi$get_gene_go_terms_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_locations}{\code{DefaultApi$get_gene_locations()}}
\item \href{#method-DefaultApi-get_gene_locations_with_http_info}{\code{DefaultApi$get_gene_locations_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_locations_in_taxon}{\code{DefaultApi$get_gene_locations_in_taxon()}}
\item \href{#method-DefaultApi-get_gene_locations_in_taxon_with_http_info}{\code{DefaultApi$get_gene_locations_in_taxon_with_http_info()}}
\item \href{#method-DefaultApi-get_gene_probes}{\code{DefaultApi$get_gene_probes()}}
\item \href{#method-DefaultApi-get_gene_probes_with_http_info}{\code{DefaultApi$get_gene_probes_with_http_info()}}
\item \href{#method-DefaultApi-get_genes}{\code{DefaultApi$get_genes()}}
\item \href{#method-DefaultApi-get_genes_with_http_info}{\code{DefaultApi$get_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_annotations}{\code{DefaultApi$get_platform_annotations()}}
\item \href{#method-DefaultApi-get_platform_annotations_with_http_info}{\code{DefaultApi$get_platform_annotations_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_datasets}{\code{DefaultApi$get_platform_datasets()}}
\item \href{#method-DefaultApi-get_platform_datasets_with_http_info}{\code{DefaultApi$get_platform_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_element}{\code{DefaultApi$get_platform_element()}}
\item \href{#method-DefaultApi-get_platform_element_with_http_info}{\code{DefaultApi$get_platform_element_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_element_genes}{\code{DefaultApi$get_platform_element_genes()}}
\item \href{#method-DefaultApi-get_platform_element_genes_with_http_info}{\code{DefaultApi$get_platform_element_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_platform_elements}{\code{DefaultApi$get_platform_elements()}}
\item \href{#method-DefaultApi-get_platform_elements_with_http_info}{\code{DefaultApi$get_platform_elements_with_http_info()}}
\item \href{#method-DefaultApi-get_platforms}{\code{DefaultApi$get_platforms()}}
\item \href{#method-DefaultApi-get_platforms_with_http_info}{\code{DefaultApi$get_platforms_with_http_info()}}
\item \href{#method-DefaultApi-get_platforms_by_ids}{\code{DefaultApi$get_platforms_by_ids()}}
\item \href{#method-DefaultApi-get_platforms_by_ids_with_http_info}{\code{DefaultApi$get_platforms_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_result_set}{\code{DefaultApi$get_result_set()}}
\item \href{#method-DefaultApi-get_result_set_with_http_info}{\code{DefaultApi$get_result_set_with_http_info()}}
\item \href{#method-DefaultApi-get_result_set_as_tsv}{\code{DefaultApi$get_result_set_as_tsv()}}
\item \href{#method-DefaultApi-get_result_set_as_tsv_with_http_info}{\code{DefaultApi$get_result_set_as_tsv_with_http_info()}}
\item \href{#method-DefaultApi-get_result_sets}{\code{DefaultApi$get_result_sets()}}
\item \href{#method-DefaultApi-get_result_sets_with_http_info}{\code{DefaultApi$get_result_sets_with_http_info()}}
\item \href{#method-DefaultApi-get_taxa}{\code{DefaultApi$get_taxa()}}
\item \href{#method-DefaultApi-get_taxa_with_http_info}{\code{DefaultApi$get_taxa_with_http_info()}}
\item \href{#method-DefaultApi-get_taxa_by_ids}{\code{DefaultApi$get_taxa_by_ids()}}
\item \href{#method-DefaultApi-get_taxa_by_ids_with_http_info}{\code{DefaultApi$get_taxa_by_ids_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_datasets}{\code{DefaultApi$get_taxon_datasets()}}
\item \href{#method-DefaultApi-get_taxon_datasets_with_http_info}{\code{DefaultApi$get_taxon_datasets_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_genes}{\code{DefaultApi$get_taxon_genes()}}
\item \href{#method-DefaultApi-get_taxon_genes_with_http_info}{\code{DefaultApi$get_taxon_genes_with_http_info()}}
\item \href{#method-DefaultApi-get_taxon_genes_overlapping_chromosome}{\code{DefaultApi$get_taxon_genes_overlapping_chromosome()}}
\item \href{#method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info}{\code{DefaultApi$get_taxon_genes_overlapping_chromosome_with_http_info()}}
\item \href{#method-DefaultApi-search}{\code{DefaultApi$search()}}
\item \href{#method-DefaultApi-search_with_http_info}{\code{DefaultApi$search_with_http_info()}}
\item \href{#method-DefaultApi-search_annotations}{\code{DefaultApi$search_annotations()}}
\item \href{#method-DefaultApi-search_annotations_with_http_info}{\code{DefaultApi$search_annotations_with_http_info()}}
\item \href{#method-DefaultApi-search_datasets}{\code{DefaultApi$search_datasets()}}
\item \href{#method-DefaultApi-search_datasets_with_http_info}{\code{DefaultApi$search_datasets_with_http_info()}}
\item \href{#method-DefaultApi-search_taxon_datasets}{\code{DefaultApi$search_taxon_datasets()}}
\item \href{#method-DefaultApi-search_taxon_datasets_with_http_info}{\code{DefaultApi$search_taxon_datasets_with_http_info()}}
\item \href{#method-DefaultApi-clone}{\code{DefaultApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-new"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new DefaultApi.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$new(api_client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_client}}{An instance of API client.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_api_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_api_info}{}}}
\subsection{Method \code{get_api_info()}}{
Retrieve an object with basic API information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_api_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectApiInfoValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_api_info_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_api_info_with_http_info}{}}}
\subsection{Method \code{get_api_info_with_http_info()}}{
Retrieve an object with basic API information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_api_info_with_http_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectApiInfoValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_annotations}{}}}
\subsection{Method \code{get_dataset_annotations()}}{
Retrieve the annotations analysis of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_annotations(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectSetAnnotationValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_annotations_with_http_info}{}}}
\subsection{Method \code{get_dataset_annotations_with_http_info()}}{
Retrieve the annotations analysis of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_annotations_with_http_info(
  dataset,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectSetAnnotationValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_design"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_design}{}}}
\subsection{Method \code{get_dataset_design()}}{
Retrieve the design of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_design(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_design_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_design_with_http_info}{}}}
\subsection{Method \code{get_dataset_design_with_http_info()}}{
Retrieve the design of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_design_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (data.frame) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression}{}}}
\subsection{Method \code{get_dataset_differential_expression()}}{
Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression(
  datasets,
  diff_ex_set = NULL,
  threshold = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{diff_ex_set}}{(optional) No description}

\item{\code{threshold}}{(optional) No description (default value: 1.0)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListExperimentExpressionLevelsValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_with_http_info()}}{
Retrieve the expression levels of a set of datasets subject to a threshold on their differential expressions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_with_http_info(
  datasets,
  diff_ex_set = NULL,
  threshold = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{diff_ex_set}}{(optional) No description}

\item{\code{threshold}}{(optional) No description (default value: 1.0)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListExperimentExpressionLevelsValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses()}}{
Retrieve the differential analyses of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses(
  dataset,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListDifferentialExpressionAnalysisValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_with_http_info()}}{
Retrieve the differential analyses of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_with_http_info(
  dataset,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListDifferentialExpressionAnalysisValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_result_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_result_sets}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_result_sets()}}{
Retrieve the result sets of all differential analyses of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_result_sets(
  dataset,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
void
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_differential_expression_analyses_result_sets_with_http_info}{}}}
\subsection{Method \code{get_dataset_differential_expression_analyses_result_sets_with_http_info()}}{
Retrieve the result sets of all differential analyses of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_differential_expression_analyses_result_sets_with_http_info(
  dataset,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (void) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression}{}}}
\subsection{Method \code{get_dataset_expression()}}{
Retrieve the expression data of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression(
  dataset,
  filter = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_with_http_info()}}{
Retrieve the expression data of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_with_http_info(
  dataset,
  filter = FALSE,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: FALSE)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (data.frame) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_for_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_for_genes}{}}}
\subsection{Method \code{get_dataset_expression_for_genes()}}{
Retrieve the expression data matrix of a set of datasets and genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_for_genes(
  datasets,
  genes,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{genes}}{}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListExperimentExpressionLevelsValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_for_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_for_genes_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_for_genes_with_http_info()}}{
Retrieve the expression data matrix of a set of datasets and genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_for_genes_with_http_info(
  datasets,
  genes,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{genes}}{}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListExperimentExpressionLevelsValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_pca"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_pca}{}}}
\subsection{Method \code{get_dataset_expression_pca()}}{
Retrieve the principal components (PCA) of a set of datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_pca(
  datasets,
  component = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{component}}{(optional) No description (default value: 1)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListExperimentExpressionLevelsValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_expression_pca_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_expression_pca_with_http_info}{}}}
\subsection{Method \code{get_dataset_expression_pca_with_http_info()}}{
Retrieve the principal components (PCA) of a set of datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_expression_pca_with_http_info(
  datasets,
  component = 1,
  limit = 100,
  keep_non_specific = FALSE,
  consolidate = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{}

\item{\code{component}}{(optional) No description (default value: 1)}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{keep_non_specific}}{(optional) No description (default value: FALSE)}

\item{\code{consolidate}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListExperimentExpressionLevelsValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_platforms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_platforms}{}}}
\subsection{Method \code{get_dataset_platforms()}}{
Retrieve the platform of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_platforms(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListArrayDesignValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_platforms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_platforms_with_http_info}{}}}
\subsection{Method \code{get_dataset_platforms_with_http_info()}}{
Retrieve the platform of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_platforms_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListArrayDesignValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_raw_expression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_raw_expression}{}}}
\subsection{Method \code{get_dataset_raw_expression()}}{
Retrieve raw expression data of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_raw_expression(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_raw_expression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_raw_expression_with_http_info}{}}}
\subsection{Method \code{get_dataset_raw_expression_with_http_info()}}{
Retrieve raw expression data of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_raw_expression_with_http_info(
  dataset,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (data.frame) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_samples"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_samples}{}}}
\subsection{Method \code{get_dataset_samples()}}{
Retrieve the samples of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_samples(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListBioAssayValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_samples_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_samples_with_http_info}{}}}
\subsection{Method \code{get_dataset_samples_with_http_info()}}{
Retrieve the samples of a dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_samples_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListBioAssayValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_svd"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_svd}{}}}
\subsection{Method \code{get_dataset_svd()}}{
Retrieve the singular value decomposition (SVD) of a dataset expression data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_svd(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectSimpleSVDValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_dataset_svd_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_dataset_svd_with_http_info}{}}}
\subsection{Method \code{get_dataset_svd_with_http_info()}}{
Retrieve the singular value decomposition (SVD) of a dataset expression data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_dataset_svd_with_http_info(dataset, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectSimpleSVDValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets}{}}}
\subsection{Method \code{get_datasets()}}{
Retrieve all datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_with_http_info}{}}}
\subsection{Method \code{get_datasets_with_http_info()}}{
Retrieve all datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_with_http_info(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_by_ids}{}}}
\subsection{Method \code{get_datasets_by_ids()}}{
Retrieve datasets by their identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_by_ids(
  dataset,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_datasets_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_datasets_by_ids_with_http_info}{}}}
\subsection{Method \code{get_datasets_by_ids_with_http_info()}}{
Retrieve datasets by their identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_datasets_by_ids_with_http_info(
  dataset,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_gene_coexpression"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_gene_coexpression}{}}}
\subsection{Method \code{get_gene_gene_coexpression()}}{
Retrieve the coexpression of two given genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_gene_coexpression(
  gene,
  with = NULL,
  limit = 100,
  stringency = 1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{with}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{stringency}}{(optional) No description (default value: 1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListCoexpressionValueObjectExt
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_gene_coexpression_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_gene_coexpression_with_http_info}{}}}
\subsection{Method \code{get_gene_gene_coexpression_with_http_info()}}{
Retrieve the coexpression of two given genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_gene_coexpression_with_http_info(
  gene,
  with = NULL,
  limit = 100,
  stringency = 1,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{with}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 100)}

\item{\code{stringency}}{(optional) No description (default value: 1)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListCoexpressionValueObjectExt) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_go_terms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_go_terms}{}}}
\subsection{Method \code{get_gene_go_terms()}}{
Retrieve the GO terms associated to a gene
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_go_terms(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListGeneOntologyTermValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_go_terms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_go_terms_with_http_info}{}}}
\subsection{Method \code{get_gene_go_terms_with_http_info()}}{
Retrieve the GO terms associated to a gene
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_go_terms_with_http_info(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListGeneOntologyTermValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations}{}}}
\subsection{Method \code{get_gene_locations()}}{
Retrieve the physical locations of a given gene
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListPhysicalLocationValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_with_http_info}{}}}
\subsection{Method \code{get_gene_locations_with_http_info()}}{
Retrieve the physical locations of a given gene
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_with_http_info(gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListPhysicalLocationValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_in_taxon"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_in_taxon}{}}}
\subsection{Method \code{get_gene_locations_in_taxon()}}{
Retrieve physical locations for a given gene and taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_in_taxon(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListPhysicalLocationValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_locations_in_taxon_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_locations_in_taxon_with_http_info}{}}}
\subsection{Method \code{get_gene_locations_in_taxon_with_http_info()}}{
Retrieve physical locations for a given gene and taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_locations_in_taxon_with_http_info(
  taxon,
  gene,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListPhysicalLocationValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_probes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_probes}{}}}
\subsection{Method \code{get_gene_probes()}}{
Retrieve the probes associated to a genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_probes(gene, offset = 0, limit = 20, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectCompositeSequenceValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_gene_probes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_gene_probes_with_http_info}{}}}
\subsection{Method \code{get_gene_probes_with_http_info()}}{
Retrieve the probes associated to a genes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_gene_probes_with_http_info(
  gene,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{gene}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectCompositeSequenceValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_genes}{}}}
\subsection{Method \code{get_genes()}}{
Retrieve genes matching a gene identifier
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_genes(genes, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{genes}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListGeneValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_genes_with_http_info}{}}}
\subsection{Method \code{get_genes_with_http_info()}}{
Retrieve genes matching a gene identifier
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_genes_with_http_info(genes, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{genes}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListGeneValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_annotations}{}}}
\subsection{Method \code{get_platform_annotations()}}{
Retrieve the annotations of a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_annotations(platform, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_annotations_with_http_info}{}}}
\subsection{Method \code{get_platform_annotations_with_http_info()}}{
Retrieve the annotations of a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_annotations_with_http_info(
  platform,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (data.frame) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_datasets}{}}}
\subsection{Method \code{get_platform_datasets()}}{
Retrieve all experiments within a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_datasets(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_datasets_with_http_info}{}}}
\subsection{Method \code{get_platform_datasets_with_http_info()}}{
Retrieve all experiments within a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_datasets_with_http_info(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element}{}}}
\subsection{Method \code{get_platform_element()}}{
Retrieve the selected composite sequences for a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element(
  platform,
  probes,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{probes}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectCompositeSequenceValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_with_http_info}{}}}
\subsection{Method \code{get_platform_element_with_http_info()}}{
Retrieve the selected composite sequences for a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_with_http_info(
  platform,
  probes,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{probes}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectCompositeSequenceValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_genes}{}}}
\subsection{Method \code{get_platform_element_genes()}}{
Retrieve the genes associated to a probe in a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_genes(
  platform,
  probe,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{probe}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectGeneValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_element_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_element_genes_with_http_info}{}}}
\subsection{Method \code{get_platform_element_genes_with_http_info()}}{
Retrieve the genes associated to a probe in a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_element_genes_with_http_info(
  platform,
  probe,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{probe}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectGeneValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_elements"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_elements}{}}}
\subsection{Method \code{get_platform_elements()}}{
Retrieve the composite sequences for a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_elements(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectCompositeSequenceValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platform_elements_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platform_elements_with_http_info}{}}}
\subsection{Method \code{get_platform_elements_with_http_info()}}{
Retrieve the composite sequences for a given platform
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platform_elements_with_http_info(
  platform,
  offset = 0,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectCompositeSequenceValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms}{}}}
\subsection{Method \code{get_platforms()}}{
Retrieve all platforms
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectArrayDesignValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_with_http_info}{}}}
\subsection{Method \code{get_platforms_with_http_info()}}{
Retrieve all platforms
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_with_http_info(
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectArrayDesignValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_by_ids}{}}}
\subsection{Method \code{get_platforms_by_ids()}}{
Retrieve all platforms matching a set of platform identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_by_ids(
  platform,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectArrayDesignValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_platforms_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_platforms_by_ids_with_http_info}{}}}
\subsection{Method \code{get_platforms_by_ids_with_http_info()}}{
Retrieve all platforms matching a set of platform identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_platforms_by_ids_with_http_info(
  platform,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{platform}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectArrayDesignValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set}{}}}
\subsection{Method \code{get_result_set()}}{
Retrieve a single analysis result set by its identifier
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set(result_set, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{result_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectExpressionAnalysisResultSetValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_with_http_info}{}}}
\subsection{Method \code{get_result_set_with_http_info()}}{
Retrieve a single analysis result set by its identifier
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_with_http_info(result_set, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{result_set}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectExpressionAnalysisResultSetValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_as_tsv"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_as_tsv}{}}}
\subsection{Method \code{get_result_set_as_tsv()}}{
Retrieve a single analysis result set by its identifier as a tab-separated values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_as_tsv(result_set_, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{result_set_}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_set_as_tsv_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_set_as_tsv_with_http_info}{}}}
\subsection{Method \code{get_result_set_as_tsv_with_http_info()}}{
Retrieve a single analysis result set by its identifier as a tab-separated values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_set_as_tsv_with_http_info(
  result_set_,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{result_set_}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (data.frame) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_sets}{}}}
\subsection{Method \code{get_result_sets()}}{
Retrieve all result sets matching the provided criteria
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_sets(
  datasets = NULL,
  database_entries = NULL,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{(optional) No description}

\item{\code{database_entries}}{(optional) No description}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_result_sets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_result_sets_with_http_info}{}}}
\subsection{Method \code{get_result_sets_with_http_info()}}{
Retrieve all result sets matching the provided criteria
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_result_sets_with_http_info(
  datasets = NULL,
  database_entries = NULL,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{(optional) No description}

\item{\code{database_entries}}{(optional) No description}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionAnalysisResultSetValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa}{}}}
\subsection{Method \code{get_taxa()}}{
Retrieve all available taxa
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListTaxonValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_with_http_info}{}}}
\subsection{Method \code{get_taxa_with_http_info()}}{
Retrieve all available taxa
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_with_http_info(data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListTaxonValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_by_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_by_ids}{}}}
\subsection{Method \code{get_taxa_by_ids()}}{
Retrieve taxa by their identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_by_ids(taxa, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxa}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListTaxonValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxa_by_ids_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxa_by_ids_with_http_info}{}}}
\subsection{Method \code{get_taxa_by_ids_with_http_info()}}{
Retrieve taxa by their identifiers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxa_by_ids_with_http_info(taxa, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxa}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListTaxonValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_datasets}{}}}
\subsection{Method \code{get_taxon_datasets()}}{
Retrieve the datasets for a given taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_datasets(
  taxon,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_datasets_with_http_info}{}}}
\subsection{Method \code{get_taxon_datasets_with_http_info()}}{
Retrieve the datasets for a given taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_datasets_with_http_info(
  taxon,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes}{}}}
\subsection{Method \code{get_taxon_genes()}}{
Retrieve all genes in a given taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListGeneValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_with_http_info}{}}}
\subsection{Method \code{get_taxon_genes_with_http_info()}}{
Retrieve all genes in a given taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_with_http_info(taxon, gene, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{gene}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListGeneValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_overlapping_chromosome"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_overlapping_chromosome}{}}}
\subsection{Method \code{get_taxon_genes_overlapping_chromosome()}}{
Retrieve genes overlapping a given region in a taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_overlapping_chromosome(
  taxon,
  chromosome,
  strand = "+",
  start = NULL,
  size = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{chromosome}}{}

\item{\code{strand}}{(optional) No description (default value: "+")}

\item{\code{start}}{(optional) No description}

\item{\code{size}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListGeneValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-get_taxon_genes_overlapping_chromosome_with_http_info}{}}}
\subsection{Method \code{get_taxon_genes_overlapping_chromosome_with_http_info()}}{
Retrieve genes overlapping a given region in a taxon
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$get_taxon_genes_overlapping_chromosome_with_http_info(
  taxon,
  chromosome,
  strand = "+",
  start = NULL,
  size = NULL,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{chromosome}}{}

\item{\code{strand}}{(optional) No description (default value: "+")}

\item{\code{start}}{(optional) No description}

\item{\code{size}}{(optional) No description}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListGeneValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search}{}}}
\subsection{Method \code{search()}}{
Search everything in Gemma.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search(
  query = NULL,
  taxon = NULL,
  platform = NULL,
  result_types = NULL,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{(optional) No description}

\item{\code{taxon}}{(optional) No description}

\item{\code{platform}}{(optional) No description}

\item{\code{result_types}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SearchResultsResponseDataObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_with_http_info}{}}}
\subsection{Method \code{search_with_http_info()}}{
Search everything in Gemma.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_with_http_info(
  query = NULL,
  taxon = NULL,
  platform = NULL,
  result_types = NULL,
  limit = 20,
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{(optional) No description}

\item{\code{taxon}}{(optional) No description}

\item{\code{platform}}{(optional) No description}

\item{\code{result_types}}{(optional) No description}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (SearchResultsResponseDataObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_annotations"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_annotations}{}}}
\subsection{Method \code{search_annotations()}}{
Search for annotation tags
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_annotations(query, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ResponseDataObjectListAnnotationSearchResultValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_annotations_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_annotations_with_http_info}{}}}
\subsection{Method \code{search_annotations_with_http_info()}}{
Search for annotation tags
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_annotations_with_http_info(query, data_file = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (ResponseDataObjectListAnnotationSearchResultValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_datasets}{}}}
\subsection{Method \code{search_datasets()}}{
Retrieve datasets associated to an annotation tags search
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_datasets(
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_datasets_with_http_info}{}}}
\subsection{Method \code{search_datasets_with_http_info()}}{
Retrieve datasets associated to an annotation tags search
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_datasets_with_http_info(
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_taxon_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_taxon_datasets}{}}}
\subsection{Method \code{search_taxon_datasets()}}{
Retrieve datasets within a given taxa associated to an annotation tags search
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_taxon_datasets(
  taxon,
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
PaginatedResponseDataObjectExpressionExperimentValueObject
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-search_taxon_datasets_with_http_info"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-search_taxon_datasets_with_http_info}{}}}
\subsection{Method \code{search_taxon_datasets_with_http_info()}}{
Retrieve datasets within a given taxa associated to an annotation tags search
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$search_taxon_datasets_with_http_info(
  taxon,
  query,
  filter = "",
  offset = 0,
  limit = 20,
  sort = "+id",
  data_file = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taxon}}{}

\item{\code{query}}{}

\item{\code{filter}}{(optional) No description (default value: "")}

\item{\code{offset}}{(optional) No description (default value: 0)}

\item{\code{limit}}{(optional) No description (default value: 20)}

\item{\code{sort}}{(optional) No description (default value: "+id")}

\item{\code{data_file}}{(optional) name of the data file to save the result}

\item{\code{...}}{Other optional arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response (PaginatedResponseDataObjectExpressionExperimentValueObject) with additional information such as HTTP status code, headers
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultApi-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultApi-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
